def display_original_and_predicted_masks(directory, model, mask_dir):
    if not os.path.exists(mask_save_directory):
        os.makedirs(mask_save_directory)
        
    for filename in os.listdir(directory):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            image_path = os.path.join(directory, filename)
            image = cv2.imread(image_path)
            if image is None:
                print(f"Failed to load image at {image_path}")
                continue

            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            image_resized = cv2.resize(image_rgb, (256, 256))
            image_normalized = image_resized / 255.0
            image_expanded = np.expand_dims(image_normalized, axis=0)

            predicted_mask = model.predict(image_expanded)[0].squeeze()

            inverted_pred_mask = 1 - predicted_mask  # Inverting the mask so that dark spots turn bright
            
            mask_filename = os.path.join(mask_save_directory, f"{os.path.splitext(filename)[0]}_mask.png")
            cv2.imwrite(mask_filename, (inverted_pred_mask * 255).astype(np.uint8))


            plt.figure(figsize=(12, 6))

            plt.subplot(1, 2, 1)
            plt.imshow(image_rgb)
            plt.title(f'{filename}')
            plt.axis('off')

            plt.subplot(1, 2, 2)
            #plt.imshow(inverted_pred_mask, cmap='gray')
            plt.imshow(inverted_pred_mask, cmap='gray')
            plt.title('Inverted Predicted Mask')
            plt.axis('off')

            plt.show()
            
mask_save_dir = os.path.join(base_dir, 'predicted_masks')
display_original_and_predicted_masks(original_overlay_image_dir, best_model, mask_save_dir)

def visualize_and_adjust_threshold(mask_directory, threshold_offset, min_area, max_area, circularity_threshold):
    for filename in os.listdir(mask_directory):
        if filename.lower().endswith('_mask.png'):
            mask_path = os.path.join(mask_directory, filename)
            mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            
            if mask is None:
                print("Failed to load mask:", mask_path)
                continue

            # Existing thresholding and labeling
            otsu_threshold, _ = cv2.threshold(mask, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            adjusted_threshold = otsu_threshold + threshold_offset * 255
            _, binary_mask = cv2.threshold(mask, adjusted_threshold, 255, cv2.THRESH_BINARY_INV)
            binary_mask = 1 - morphology.binary_closing(morphology.binary_opening(binary_mask, morphology.disk(1.5)))
            labeled_mask = measure.label(binary_mask)
            properties = measure.regionprops(labeled_mask)

            # Distance transform and thresholding for sparse detection
            distance = ndimage.distance_transform_edt(binary_mask)
            sparse_mask = distance < 1.5  # threshold for sparse areas

            # Filter regions based on size, sparsity, and circularity
            filtered_mask = np.zeros_like(binary_mask)
            for prop in properties:
                circularity = (4 * np.pi * prop.area) / (prop.perimeter ** 2)
                if (min_area <= prop.area <= max_area and
                    sparse_mask[prop.coords[:, 0], prop.coords[:, 1]].any() and
                    circularity >= circularity_threshold):
                    filtered_mask[labeled_mask == prop.label] = 255

            plt.figure(figsize=(10, 4))
            plt.hist(mask.ravel(), bins=256, range=[0, 256])
            plt.title('Histogram')
            plt.axvline(x=otsu_threshold, color='r', label='Otsu Threshold')
            plt.axvline(x=adjusted_threshold, color='g', label='Adjusted Threshold')
            plt.legend()
            plt.show()

            # Display the results
            fig, axs = plt.subplots(1, 3, figsize=(18, 6))
            axs[0].imshow(mask, cmap='gray')
            axs[0].set_title('Original Mask')
            axs[0].axis('off')

            axs[1].imshow(binary_mask, cmap='gray')
            axs[1].set_title('Processed Mask')
            axs[1].axis('off')

            axs[2].imshow(filtered_mask, cmap='gray')
            axs[2].set_title('Filtered Mask')
            axs[2].axis('off')

            plt.show()

# Adjust the path to your mask directory and any other parameters as necessary
threshold_offset = 0.02
min_area = 10  # Minimum area of interest
max_area = 50  # Maximum area of interest
circularity_threshold = 0.7  # Adjust this value as needed to filter more or less circular objects
visualize_and_adjust_threshold(mask_save_dir, threshold_offset, min_area, max_area, circularity_threshold)
